<%@page language="java" import="java.sql.*, java.io.*" 
contentType="text/html" pageEncoding="UTF-8"%>

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<title>КЛП по JAVA</title>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
<link href="../../css/style1.css" rel="stylesheet" type="text/css" />
<script src="js/login.js" type="text/javascript"></script>
    </head>
<body>
<%
response.setContentType("text/html; charset=UTF-8");
request.setCharacterEncoding("UTF-8");
if(session.getAttribute("username")==null)
{
    String site = new String("../../eor.jsp");
   response.setStatus(response.SC_MOVED_TEMPORARILY);
   response.setHeader("Location", site); 
}%>
<div class="header_area">
  <div class="main_area">
      <div>
          <br>
          <br>
      
          
      <div class="nav_wrap">
       
  <div class="nav_wrap2">
        <ul>
        
        
           <li><a href="../eor.jsp" class="home1">Главная</a></li>
          <li><a href="../lpz/lp/lp1/lp1.jsp" class="lekci1">Практикум</a></li>
          <li><a href="../test/test.jsp" class="testy1">Контроль знаний</a></li>
          <li><a href="../resursy/present/present1.jsp" class="glos1">Ресурсы</a></li>
          <li><a href="gloss.jsp" class="glos">Глоссарий</a></li>
           </ul>
          </div>
        <br class="blank" />
          <br />
          <br />
          <br />
          <br />
          <br />
          <br />
          <br />
          <br />
          <br />
          <br />
          <br />
          <br />
<div class="main_area">
  <div class="body_wrap">
    <div class="left_body_wrap">
      <div class="left_body_main2">
        <div class="main_wrap">
          <h2 class="h2">Глоссарий</h2>
        </div>
        <ul class="alphabet">
            <li><a style="font-style: normal;" href="#a">А &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#b">B &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#c">C &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#d">D &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#e">E &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#f">F &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#g">G &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#h">H &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#i">I &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#j">J &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#k">K &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#l">L &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#m">M &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#n">N &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#o">O &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#p">P &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#q">Q &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#r">R &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#s">S &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#t">T &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#u">U &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#v">V &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#w">W &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#x">X &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#y">Y &nbsp;&nbsp;</a></li>
            <li><a style="font-style: normal;" href="#z">Z</a></li>
           </ul>
<br><br><br>
<div class="sizetext">
          <h3 style="text-align: left; text-indent: 40px; text-decoration: underline; color:#f4911c;" id="a">A</h3>
        <p><b>Abstract Window Toolkit - AWT</b><p>Стандартный пакет графических компонент, реализованных с использованием специфических платформенных методов. Данные компоненты поддерживают лишь то подмножество функциональных возможностей, которое присуще всем платформам.</p>
        <br>
	<p><b>abstract</b><p>Ключевое слово языка программирования Java, используемое в определении класса для указания на невозможность создания его экземпляров, но при этом доступного для наследования другими классами. Абстрактный класс может содержать нереализованные (абстрактные) методы, которые должны быть реализованы в его подклассах.</p>
        <br>
	<p><b>abstract class (абстрактный класс)</b><p>Класс, который содержит один или более абстрактных методов, вследствие чего нельзя создавать экземпляры данного класса. Абстрактные классы определены таким образом, чтобы другие классы могли расширять и конкретизировать их, реализуя абстрактные методы.</p>
 	<br>
        <p><b>abstract method (абстрактный метод)</b><p>Метод, не имеющий реализации.</p>
        <br>
	<p><b>access control (контроль доступа)</b><p>Технические средства, посредством которых ограничиваются множества пользователей или программ, взаимодействующих с ресурсами, с целью повышения целостности, конфиденциальности и доступности.</p>
        <br>
	<p><b>activation (активация)</b><p>Процесс передачи корпоративных компонент (enterprise beans) из вторичного устройства хранения данных в память.</p>
        <br>
	<p><b>actual parameter list (список фактических параметров)</b><p>Аргументы, определенные в вызове метода.</p>
        <br>
	<p><b>alpha value (альфа-фактор)</b><p>Значение, указывающее яркость (или интенсивность) пикселя.</p>
        <br>
	<p><b>API - Application Programming Interface (интерфейс прикладного программирования)</b><p>Спецификация, предназначенная для пользователей и описывающая методы доступа к свойствам и состоянию объектов и классов.</p>
        <br>
	<p><b>applet (апплет)</b><p>Компонент, который обычно исполняется в Web-браузере или в любой другой программе просмотра апплетов.</p>
        <br>
	<p><b>applet container (контейнер апплетов)</b><p>Контейнер, включающий в себя поддержку модели программирования апплетов.</p>
        <br>
	<p><b>appliances (устройства)</b><p>Сетевые устройства, такие как принтеры, терминалы с поддержкой технологии Java и клиенты, управляемые посредством использования Java Management API (JMAPI).</p>
        <br>
	<p><b>application assembler (компоновщик приложения)</b><p>Человек, объединяющий компоненты и модули в большие модули разработки.</p>
        <br>
	<p><b>application client (клиентское приложение)</b><p>Клиентская программа первого уровня, исполняемая на собственной виртуальной Java-машине.</p>
        <br>
	<p><b>application client container (контейнер клиентского приложения)</b><p>Контейнер, поддерживающий клиентские приложения и обеспечивающий интегрированное представление API платформы J2EE.</p>
        <br>
	<p><b>application client module (модуль клиентского приложения)</b><p>Программный модуль, состоящий из одного или более классов и описания клиентского приложения.</p>
        <br>
	<p><b>Application Component Provider (поставщик программных компонент)</b><p>Поставщик, который предоставляет классы Java, реализующие методы компонентов, описания JSP-страниц и необходимые дескрипторы.</p>
        <br>
	<p><b>Application Programming Model - APM (модель программирования приложения)</b><p>Модель прикладного программирования, которая определяет, как использовать и объединять возможности платформы J2EE для создания прикладных решений в предметной области предприятия.</p>
        <br>
	<p><b>argument (аргумент)</b><p>Элемент данных, указанный в вызове метода. Аргумент может быть константой, переменной или выражением.</p>
        <br>
	<p><b>array (массив)</b><p>Совокупность элементов данных одного типа, в которой позиция каждого элемента однозначно определена целым числом (индексом массива).</p>
        <br>
	<p><b>authentication (аутентификация)</b><p>Процесс, посредством которого один объект показывает другому, что он действует от имени определенной идентификационной записи. Платформа J2EE нуждается в трех видах аутентификации: обычной (basic), связанной с формой (form-based) и взаимной (mutual).</p>
        <br>
	<p><b>authorization constraint (ограничение авторизации)</b><p>Набор ролевых имен, предназначенных для защиты и разрешающих доступ к Web-ресурсам.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline; color:#f4911c;" id="b">B</h3>
        <p><b>basic authentication (базовая (открытая) аутентификация)</b><p>Метод проверки Web-сервером имени пользователя и пароля, полученных при помощи механизма аутентификации, встроенного в Web-клиент.</p>
	<br>
        <p><b>bean (bean-компонент)</b><p>Программный компонент многократного использования. Bean-компоненты могут быть объединены для создания приложения.</p>
        <br>
	<p><b>bean-managed persistence (механизм сохранения, управляемый bean-компонентом)</b><p>Механизм, при котором передача данных между переменными экземпляров bean-компонента и основным администратором ресурсов управляется bean-компонентом.</p>
        <br>
	<p><b>bean-managed transaction (транзакция, управляемая bean-компонентом)</b><p>Корпоративный компонент (enterprise bean) определяет границы транзакции.</p>
        <br>
	<p><b>binary operator (бинарный оператор)</b><p>Знак операции, имеющий два аргумента.</p>
        <br>
	<p><b>bitwise operator (побитовый оператор)</b><p>Знак операции, воздействующий на операнды, как на набор битов (0 и 1). Например, бинарные логические операции (&, |, ^), бинарные операции сдвига (<<, >>, >>>) и унарная операция дополнения (~).</p>
        <br>
	<p><b>block (блок)</b><p>Любой код на языке программирования Java, заключенный между двумя фигурными скобками. Например, {x = 1;}.</p>
        <br>
	<p><b>boolean (булевский)</b><p>Относится к выражению или переменной, которые могут принимать только два значения: true ("истина") и false ("ложь"). В языке программирования Java существует тип boolean, а также литеральные константы true и false.</p>
        <br>
	<p><b>bounding box (ограничительная область)</b><p>Прямоугольник наименьшего размера, содержащий указанную геометрическую фигуру. Для растровых объектов включает все заданные пиксели.</p>
        <br>
	<p><b>break</b><p>Ключевое слово языка программирования Java. Оператор break передаёт управление строке, следующей за текущей структурой. Если за break следует метка, то программа продолжает исполнение, начиная с "помеченного" оператора.</p>
        <br>
	<p><b>business logic (бизнес-логика)</b><p>Код, реализующий функциональность приложения. В модели Enterprise Java Beans эта логика реализуется при помощи методов корпоративного компонента (enterprise bean).</p>
        <br>
	<p><b>business-method (бизнес-метод)</b><p>Метод корпоративного компонента (enterprise bean), реализующий бизнес-логику или правила приложения.</p>
        <br>
	<p><b>byte (байт)</b><p>Последовательность из восьми битов. В языке программирования Java определен соответствующий тип byte.</p>
        <br>
	<p><b>bytecode (байт-код)</b><p>Машинно-независимый код, генерируемый Java-компилятором и исполняемый Java-интерпретатором.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline; color:#f4911c;" id="c">C</h3>
        <p><b>callback methods (методы обратной связи)</b><p>Метод компонента, вызываемый контейнером для уведомления компонента о важных событиях во время его жизненного цикла.</p>    
        <br>
	<p><b>caller principal (администратор вызывающего оператора)</b><p>Администратор, который идентифицирует объект, вызывающий метод корпоративного компонента (enterprise bean).</p>
	<br>       
	<p><b>case</b><p>Ключевое слово языка программирования Java (оператор switch), которое определяет набор инструкций, исполняющихся в случае, если значение переключающего выражения совпадает со значением константы (разметки выбирающего предложения), указанной в конструкции case.</p>
        <br>
	<p><b>casting (преобразование типа)</b><p>Явное преобразование одного типа данных в другой.</p>
        <br>
	<p><b>catch</b><p>Ключевое слово языка программирования Java, используемое для объявления блока инструкций, которые должны быть выполнены в случае исключительной ситуации или ошибки выполнения, возникающей в предшествующем блоке try.</p>
        <br>
	<p><b>char</b><p>Ключевое слово языка программирования Java, используемое для объявления переменной символьного типа.</p>
        <br>
	<p><b>class (класс)</b><p>Тип в языке программирования Java, определяющий реализацию особого вида объекта. Описание класса определяет экземпляр класса, его переменные и методы. Так же определяются интерфейсы и суперклассы. По умолчанию суперклассом любого класса является Object.</p>
        <br>
	<p><b>class method (метод класса {типа})</b><p>Метод, который вызывается безотносительно ссылки на конкретный объект. Методы класса влияют на класс в целом, а не на конкретный его экземпляр.<p>Также носит название статического метода.</p>
        <br>
	<p><b>classpath (путь к классам)</b><p>Переменная среды окружения, которая сообщает виртуальной машине Java и приложениям Java (например, утилитам, расположенным в директории JDK 1.1.X\bin), где находятся библиотеки классов, включая пользовательские библиотеки.<p>Свойство виртуальной машины (JVM), которое может быть задано с помощью переменной окружения, либо другими способами, например, с помощью опций JVM.</p>
        <br>
	<p><b>class variable (переменная класса {типа})</b><p>Переменная, относящаяся к некоторому классу в целом, а не к отдельным экземплярам класса. Переменные класса являются элементами определения класса.<p>Также носит название статического поля.</p>
        <br>
	<p><b>client (клиент)</b><p>В модели соединения "клиент-сервер" клиент - это процесс, который удаленно обращается к ресурсам вычислительного сервера.</p>
        <br>
	<p><b>codebase (адрес основного кода)</b><p>При работе с атрибутом code в тэге APPLET указывает полный путь к файлу главного класса апплета: code определяет имя файла, а codebase - URL директории, содержащей файл.</p>
        <br>
	<p><b>comment (комментарий)</b><p>Поясняющий текст в программе, который игнорируется компилятором. В приложениях Java комментарии выделяются символами // или /*…*/.</p>
        <br>
	<p><b>commit (фиксация {транзакции})</b><p>Момент транзакции, когда все изменения, проведенные в процессе транзакции, фиксируются в базе данных.</p>
        <br>
	<p><b>compilation unit (единица компиляции)</b><p>Минимальная единица исходного кода, которая может быть откомпилирована. В текущей реализации Java единица компиляции - это последовательность определений интерфейсов и классов, которой могут предшествовать объявление пакета и объявления импорта.</p>
        <br>
	<p><b>compiler (компилятор)</b><p>Программа, транслирующая исходный код приложения в код, исполняемый компьютером. Java-компилятор транслирует исходный код, написанный на языке Java, в машинно-независимый код (байт-код) для виртуальной машины Java.</p>
        <br>
	<p><b>component (компонент)</b><p>Программный модуль, поддерживаемый контейнером. Компоненты конфигурируемы на стадии разработки. Платформа J2EE определяет четыре вида компонент: корпоративные компоненты (enterprise beans), Web-компоненты, апплеты и клиентские приложения.</p>
        <br>
	<p><b>component contract (контракт компонента)</b><p>Набор условий, регулирующих отношения между компонентом и его контейнером. Контракт включает: управление жизненным циклом компонента, контекстный интерфейс, используемый образцом компоненты для получения информации о контейнере или использования возможностей контейнера, и списка функциональных возможностей, которые должен поддерживать каждый контейнер для данной компоненты.</p>
        <br>
	<p><b>component environment (окружение компонента)</b><p>Набор требований, определяемых Поставщиком Программных Компонент (Application Component Provider), которые должны быть доступны компоненту J2EE. Записи окружения декларативно определены в описании компонента. Каждый компонент указывает и получает доступ к значениям конфигурации компонента, используя контекст java:comp/env JNDI. Эти значения могут быть объектами, от которых зависит компонент, такими как JDBC DataSource или простыми значениями, такими как налоговая ставка.</p>
        <br>
	<p><b>compositing (компоновка)</b><p>Процесс наложения одного изображения на другое, с целью получения единого изображения.</p>
        <br>
	<p><b>connector (коннектор)</b><p>Стандартный механизм расширения контейнеров для обеспечения взаимодействия с управленческими информационными системами (Executive Information Systems - EISs). Коннектор специфичен для каждой EIS и состоит из адаптера ресурсов и средств разработки приложений для взаимодействия с EIS. Адаптер ресурсов подключен к контейнеру посредством контрактов системного уровня, определенных в архитектуре коннектора.</p>
        <br>
	<p><b>connector architecture (архитектура коннектора)</b><p>Архитектура, предназначенная для интеграции серверов J2EE с управленческими информационными системами (Executive Information Systems - EISs). Архитектура состоит из двух частей: адаптер ресурсов производителя EIS и сервер J2EE, поддерживающий этот адаптер. Данная архитектура определяет набор контрактов, которые должны поддерживаться адаптером ресурсов для подключения к J2EE-серверу. Например, транзакции, обеспечение безопасности, управление ресурсами.</p>
        <br>
	<p><b>constructor (конструктор)</b><p>Метод особого рода, создающий объект и инициализирующий его поля. В языке программирования Java имя конструктора совпадает с именем класса. Конструкторы вызываются системой при создании экземпляра объекта (исполнении конструкции new).</p>
        <br>
	<p><b>const</b><p>Зарезервированное ключевое слово языка Java. Однако, не используется текущими версиями Java.</p>
        <br>
	<p><b>container (контейнер)</b><p>Сущность, обеспечивающая управление, безопасность, разработку и сервисы выполнения компонент. Кроме того, каждый тип контейнера (EJB, Web, JSP, сервлет, апплет или приложение-клиент) также предоставляет свои специфические сервисы.</p>
        <br>
	<p><b>container-managed persistence (персистенция {сохраняемость}, управляемая контейнером)</b><p>Механизм, при котором передача данных между экземпляром корпоративной компоненты и менеджером расположенных ниже ресурсов управляется контейнером корпоративной компоненты (enterprise bean).</p>
        <br>
	<p><b>container-managed transaction (транзакция, управляемая контейнером)</b><p>Транзакция, границы которой определяются EJB-контейнером. Экземпляр корпоративной компоненты (enterprise bean) должен использовать транзакции, управляемые контейнерами.</p>
        <br>
	<p><b>context attribute (контекстный атрибут)</b><p>Объект, встроенный в контекст, ассоциированный с сервлетом.</p>
        <br>
	<p><b>continue</b><p>Ключевое слово языка программирования Java, которое обозначает оператор, завершающий текущую итерацию цикла и, если условие повторения выполняется, начинающий исполнение следующей. Если за данным ключевым словом следует метка, continue возобновляет исполнение, начиная с помеченного оператора (то есть начинается следующая итерация цикла, помеченного данной меткой).</p>
        <br>
	<p><b>conversational state (диалоговый режим)</b><p>Значения полей сессии bean-компонента плюс транзитивное замыкание объектов, доступных из полей bean-компонента. Транзитивное замыкание bean-компонента определяется в терминах протокола сериализации языка Java, которые сохранены посредством сериализации экземпляра bean-компонента.</p>
        <br>
	<p><b>Common Object Request Broker Architecture - CORBA</b><p>Технология построения распределенных объектных приложений, специфицируемая группой по развитию стандартов объектного программирования (Object Management Group - OMG).</p>
        <br>
	<p><b>core class (базовый класс)</b><p>Публичный класс (или интерфейс), являющийся стандартным членом Java Platform. Обязательным свойством таких классов является их доступность в любой операционной системе, поддерживающей среду Java. Программой, "полностью" написанной на языке Java, называется программа, использующая только такие классы, и, следовательно, обладающая свойством независимости от платформы.</p>
        <br>
	<p><b>core packages (базовые пакеты)</b><p>Необходимый набор программных интерфейсов приложений (Application Programming Interfaces - APIs) платформы Java, который поддерживается в любой реализации.</p>
        <br>
	<p><b>create method (метод create)</b><p>Метод, определенный в "домашнем" интерфейсе и вызываемый клиентом, для создания корпоративной компоненты (enterprise bean).</p>
        <br>
	<p><b>credentials (полномочия)</b><p>Учетная запись с параметрами доступа пользователя, сформированными после его успешной аутентификации.</p>
        <br>
	<p><b>critical section (критическая секция)</b><p>Фрагмент программы, в котором поток выполняет действия над общим ресурсом, доступ к которому должен быть монопольным.</p>
        <br>
	<p><b>Compatibility Test Suite - CTS (пакет проверки совместимости)</b><p>Набор программ, предназначенных для проверки соответствия продуктов J2EE спецификации платформы J2EE.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline; color:#f4911c;" id="d">D</h3>
        <p><b>declaration (объявление)</b><p>Выражение, связывающее идентификатор с атрибутами (типом). При необходимости осуществляется выделение памяти (для данных) или выполнение (для методов).</p>
        <br>
	<p><b>default</b><p>Ключевое слово языка программирования Java, при необходимости используемое после всех условий case в блоке switch. Если ни одно из проверяемых значений не совпадает со значением оператора switch, то выполняются инструкции, следующие после ключевого слова default.</p>
        <br>
	<p><b>definition (описание)</b><p>Объявление, осуществляющее резервирование памяти (для данных) или выполнение (для методов).</p>
        <br>
	<p><b>delegation (делегирование)</b><p>Передача (делегирование) функций - способность объекта или потока внутри объекта выполнять под именем клиента запросы к другим удаленным объектам.</p>
        <br>
	<p><b>deployer (администратор размещения)</b><p>Человек, устанавливающий модули и приложения J2EE в операционной системе.</p>
        <br>
	<p><b>deployment (размещение)</b><p>Процесс установки программного обеспечения в операционную среду.</p>
        <br>
	<p><b>deployment descriptor (дескриптор размещения)</b><p>XML-файл, поставляемый с каждым модулем и приложением и описывающий процесс их установки. Дескриптор размещения управляет инструментами для установки модуля или приложения с какими-либо специфичными опциями контейнера, а также описывает особые требования, предъявляемые к конфигурации.</p>
        <br>
	<p><b>deprecation (антирекомендация)</b><p>Относится к классам, интерфейсам, конструкторам, методам или полям, которые рекомендуется больше не использовать, и которые могут быть исключены из последующих версий.</p>
        <br>
	<p><b>derived from ("является потомком")</b><p>Класс X "является потомком" класса Y, если класс X расширяет (наследует) класс Y.</p>
        <br>
	<p><b>distributed (распределенный)</b><p>Работающий более чем в одном адресном пространстве.</p>
        <br>
	<p><b>distributed application (распределенное приложение)</b><p>Приложение, которое составлено из различных компонент, выполняющихся в различных средах, обычно, на разных платформах, соединенных посредством сети. Стандартные распределенные приложения: двухзвенное (клиент/сервер), трехзвенное (клиент/промежуточное программное обеспечение/сервер), n-звенное (клиент/множественное промежуточное программное обеспечение/сервер).</p>
        <br>
	<p><b>do</b><p>Ключевое слово языка программирования Java, используемое для объявления цикла, повторяющего блок инструкций. Условие выхода из цикла определяется ключевым словом while в конце итерации.</p>
        <br>
	<p><b>Document Object Model - DOM (объектная модель документа)</b><p>Дерево объектов и интерфейсы для реализации обхода вершин дерева и написания его XML-версии согласно спецификации W3C.</p>
        <br>
	<p><b>double</b><p>Ключевое слово языка программирования Java, используемое для определения переменной типа double.</p>
        <br>
	<p><b>double precision (двойная точность)</b><p>Согласно спецификации языка программирования Java, число с плавающей точкой, занимающее 64 бита данных.</p>
        <br>
	<p><b>Document Type Definition - DTD (определение типа документа)</b><p>Описание структуры и свойств XML-файлов.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="e">E</h3>
        <p><b>EJB-container (EJB-контейнер)</b><p>Контейнер, содержащий корпоративные компоненты (EJB).</p>
        <br>
	<p><b>EJB Container Provider (поставщик EJB-контейнера)</b><p>Производитель, который предоставляет EJB-контейнер.</p>
        <br>
	<p><b>EJB-context (EJB-контекст)</b><p>Объект, позволяющий корпоративному компоненту (enterprise bean) запускать сервисы контейнера и получать информацию о программе, вызвавшей клиентский метод.</p>
        <br>
	<p><b>EJB home object ("домашний" объект EJB)</b><p>Объект, обеспечивающий жизненный цикл операций (создания, удаления, поиска) для корпоративного компонента (enterprise bean). Класс для "домашнего" объекта EJB порожден инструментами разработки контейнера. "Домашний" объект EJB реализует собственный интерфейс корпоративного компонента (enterprise bean). Клиент ссылается на "домашний" объект EJB, чтобы выполнить операции жизненного цикла EJB-объекта. Для определения местонахождения EJB home object клиент использует JNDI интерфейс.</p>
        <br>
	<p><b>EJB-.jar file (EJB .jar файл)</b><p>Архив JAR, который содержит EJB-модуль.</p>
        <br>
	<p><b>EJB module (EJB модуль)</b><p>Программный модуль, который состоит из одного или более корпоративных компонентов (enterprise beans) и дескриптора установки EJB.</p>
        <br>
	<p><b>EJB object (EJB объект)</b><p>Объект, чей класс реализуется удаленным интерфейсом корпоративного компонента (enterprise bean). Клиент никогда не ссылается непосредственно на экземпляр корпоративного компонента, а только на объект EJB. Класс для объекта EJB порожден инструментами разработки, входящими в состав контейнера.</p>
        <br>
	<p><b>EJB-server (EJB-сервер)</b><p>Программное обеспечение, предоставляющее службы EJB-контейнеру. Например, EJB-контейнер обычно зависит от менеджера транзакций, который является частью EJB-сервера, предназначенной для двухфазного завершения распределенных транзакций параллельно со всеми участвующими в ней менеджерами ресурсов. Архитектура J2EE предполагает, что EJB-сервер, содержащий EJB-контейнер, поставляется тем же производителем, поэтому не существует соглашения между двумя этими сущностями. EJB-сервер может содержать один и более контейнеров EJB.</p>
        <br>
	<p><b>EJB Server Provider (поставщик EJB-сервера)</b><p>Производитель, который поставляет EJB-сервер.</p>
        <br>
	<p><b>EIS resource (ресурс управленческой информационной системы {ресурс УИС})</b><p>Сущность, предоставляющая функциональные возможности УИС клиентам системы. Например, запись или множество записей в системе базы данных, бизнес-объект в ERP-системе (системе, предназначенная для планирования и управления ресурсами предприятий), программа транзакции в системе обработки транзакций.</p>
        <br>
	<p><b>else</b><p>Ключевое слово языка программирования Java, используемое для выполнения блока инструкций в том случае, если проверка условия в операторе if дала отрицательный результат (false).</p>
        <br>
	<p><b>Embedded Java technology (технология EmbeddedJava)</b><p>Технология, которая впервые появилась в рамках Java 2 Platform. Распространение этой технологии ограничено лицензионным соглашением, которое позволяет владельцу лицензии использовать определенные Java-технологии для создания и внедрения встроенных приложений.</p>
        <br>
	<p><b>encapsulation (инкапсуляция)</b><p>Локализация (упрятывание) части данных в пределах класса. Поскольку объекты инкапсулируют данные и реализацию, пользователь может рассматривать объект как черный ящик, предоставляющий услуги. Переменные и методы экземпляров класса могут добавляться, удаляться или изменяться, но до тех пор, пока услуги, предоставляемые объектом, не изменяются, нет необходимости переписывать код, использующий данный объект.</p>
        <br>
	<p><b>enterprise bean (корпоративный компонент)</b><p>Компонент, реализующий бизнес-задачу или бизнес-объект, либо сущность или сессионный компонент.</p>
        <br>
	<p><b>Enterprise Information System - EIS (управленческая информационная система - УИС)</b><p>Приложения, которые содержат существующую систему управления информацией всей компании. Эти приложения обеспечивают информационную инфраструктуру предприятия. УИС предлагает определенный набор услуг своим клиентам. Эти услуги представлены клиентам как локальные и/или удаленные интерфейсы. Примеры УИС: ERP-система (система, предназначенная для планирования и управления ресурсами предприятий), универсальная система обработки транзакций, существующая система баз данных.</p>
        <br>
	<p><b>Enterprise Bean Provider (поставщик корпоративных компонент)</b><p>Прикладной программист, разрабатывающий классы корпоративных компонентов (enterprise beans), удаленные и локальные интерфейсы, файлы дескрипторов установки и упаковывает их в EJB-.jar файл.</p>
        <br>
	<p><b>Enterprise JavaBeans - EJB</b><p>Архитектура, предназначенная для развития и установки объектно-ориентированных, распределенных, корпоративных приложений. Приложения, написанные с использованием архитектуры Enterprise JavaBeans, являются масштабируемыми, многопользовательскими и безопасными.</p>
        <br>
	<p><b>entity bean (компонент управления данными)</b><p>Корпоративный компонент (enterprise bean), который отображает постоянные данные, хранящиеся в базе данных. Сущность идентифицируется первичным ключом. Если контейнер, которому принадлежит сущность, разрушается, сущность, ее первичный ключ и все удаленные ссылки сохраняются.</p>
        <br>
	<p><b>ebXML</b><p>ebXML основан на стандарте XML (Extensive Markup Language) и предназначен для поставки модульного набора спецификаций, позволяющего предприятиям различного масштаба и географического положения вести дела посредством Internet. ebXML снабжает компании и организации стандартным методом обмена деловой информацией, ведения торговых отношений, передачи данных, а также определения и регистрации бизнес процессов.</p>
        <br>
	<p><b>exception (исключительная ситуация)</b><p>Ситуация, возникающая во время работы программы вследствие неудачного выполнения операции, или запрограммированная с использованием оператора throw. Если в программе не предусмотрена реакция на возникшую ситуацию, дальнейшее исполнение программы невозможно. Язык программирования Java поддерживает обработку исключительных ситуаций при помощи ключевых слов try, catch и throw.</p>
        <br>
	<p><b>exception handler (обработчик исключительных ситуаций)</b><p>Блок кода, реагирующий на определенный тип исключительных ситуаций. Если исключительная ситуация произошла вследствие ошибки, после которой программа может возобновить работу, то программа продолжает выполнение после обработчика исключительных ситуаций.</p>
        <br>
	<p><b>executable context (исполняемый код)</b><p>Программа, которая выполняется из HTML-файла.</p>
        <br>
	<p><b>extends ("расширяет")</b><p>Класс X может "расширять" класс Y с целью добавления функциональности (при помощи добавления полей и методов классу Y или переопределения методов класса Y). В таком случае говорят, что класс X является подклассом класса Y. Один интерфейс "расширяет" другой при помощи добавления методов.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="f">F</h3>
        <p><b>finder method (метод поиска)</b><p>Метод, определенный в "домашнем" интерфейсе и вызываемый клиентом для нахождения сущности.</p>
        <br>
	<p><b>field (поле)</b><p>Элемент класса. Пока не определено обратное, поле не является статическим.</p>
        <br>
	<p><b>final - терминальный</b><p>Ключевое слово языка программирования Java. Объявление класса с модификатором final означает, что класс нельзя расширить или наследовать. Final-методы не могут переопределяться, final-переменные не могут изменять свое начальное значение.</p>
        <br>
	<p><b>finally</b><p>Ключевое слово языка программирования Java, задающее блок операций, которые будут выполнены независимо от того, произошла исключительная ситуация или ошибка в блоке, определенном с ключевым словом try, или нет.</p>
        <br>
	<p><b>float</b><p>Ключевое слово языка программирования Java, используемое для определения числа с плавающей точкой.</p>
        <br>
	<p><b>for</b><p>Ключевое слово языка программирования Java, используемое для объявления цикла, повторяющего блок инструкций. Программист определяет выполняемые операции, условия выхода из цикла, а также некоторые начальные действия перед началом первой итерации (инициализацию служебных переменных и пр.).</p>
        <br>
	<p><b>form-based authentication (аутентификация, связанная с формой)</b><p>Аутентификация, при которой Web-сервер выдает специализированную форму для входа в систему.</p>
        <br>
	<p><b>File Transfer Protocol - FTP (FTP - протокол)</b><p>Internet-протокол, основанный на TCP\IP. Предназначен для передачи файлов между хост-компьютерами.</p>
        <br>
	<p><b>formal parameter list (список формальных параметров)</b><p>Параметры, заданные в описании метода.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="g">G</h3>
        <p><b>garbage collection ("сборка мусора")</b><p>Автоматическое обнаружение и освобождение памяти, которая больше не используется. Система управления и слежения за правильностью выполнения программы (Java runtime system) выполняет "сборку мусора" таким образом, чтобы программисту не требовалось напрямую вызывать методы освобождения памяти. При необходимости программист может запустить сборщик мусора явно, путем вызова специального метода. В этом случае сборка мусора будет выполняться синхронно.</p>
        <br>
	<p><b>group (группа)</b><p>Совокупность пользователей в пределах данного домена политики безопасности.</p>
        <br>
	<p><b>Graphical User Interface - GUI (графический интерфейс пользователя)</b><p>Графический интерфейс, предназначенный для удобства использования некоторых программ.</p>
        <br>
	
	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="h">H</h3>
        <p><b>handle (манипулятор)</b><p>Объект, используемый для уникальной идентификации корпоративного компонента (enterprise bean). Клиент может сериализовать манипулятор, а затем десериализовать его для получения ссылки на корпоративный компонент (enterprise bean).</p>
        <br>
	<p><b>hexadecimal (шестнадцатеричный)</b><p>Система счисления с основанием 16. Знаки 0-9 и a-f представляют цифры от 0 до 15. В программе, написанной на языке Java, шестнадцатеричные числа должны начинаться с символов 0x.</p>
        <br>
	<p><b>hierarchy (иерархия)</b><p>Классификация соотношений, в которой каждый элемент, кроме верхнего (называемого корнем), является специализированным видом элемента, расположенного над ним. Каждый элемент может иметь один или несколько элементов, находящихся ниже него в иерархии. В иерархии классов Java, образуемой при наследовании, корнем является класс Object.</p>
        <br>
	<p><b>home interface ("домашний" интерфейс)</b><p>Один из двух интерфейсов для корпоративного компонента (enterprise bean). "Домашний" интерфейс может определять несколько методов для создания и удаления корпоративного компонента (enterprise bean). Для сессионных компонентов (session beans) "домашний" интерфейс определяет методы создания и удаления, тогда как для сущностей (entity beans) - методы создания, нахождения и удаления.</p>
        <br>
	<p><b>home handle ("домашний" манипулятор)</b><p>Объект, используемый для получения ссылки на "домашний" интерфейс. "Домашний" манипулятор может быть сериализован и записан в ПЗУ, а также десериализован для получения ссылки.</p>
        <br>
	<p><b>HotJava Browser (Браузер HotJava)</b><p>Легко настраиваемый Web-браузер, разработанный компанией Sun Microsystems и написанный на языке программирования Java.</p>
        <br>
	<p><b>HyperText Markup Language - HTML (язык разметки гипертекста)</b><p>Файловый формат для гипертекстовых страниц в Internet, основанный на SGML. Очень прост и разрешает внедрение изображений, звуков, видео, полей форм, а также простое форматирование текста. Ссылки на другие объекты внедряются с помощью URL.</p>
        <br>
	<p><b>HyperText Transfer Protocol - HTTP (протокол передачи гипертекстовых файлов)</b><p>Internet-протокол, основанный на TCP/IP и предназначенный для доступа к гипертекстовым объектам с удаленного компьютера.</p>
        <br>
	<p><b>HyperText Transmission Protocol, Secure - HTTPS (протокол защищенной передачи гипертекстов)</b><p>HTTP в совокупности с SSL (Secure Sockets Layer) - протоколом защищенных сокетов.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="i">I</h3>
        <p><b>Interface Definition Language - IDL (язык описания интерфейсов)</b><p>Интерфейсы прикладного программирования (APIs), написанные на языке Java, которые обеспечивают функциональную совместимость на основе стандартов и способность взаимодействия с CORBA (Common Object Request Broker Architecture).</p>
        <br>
	<p><b>identifier (идентификатор)</b><p>Имя элемента (переменной, класса, метода и проч.) программы, написанной на языке Java.</p>
        <br>
	<p><b>Internet InterORB Protocol - IIOP</b><p>Протокол, определяющий передачу сообщений между сетевыми объектами по протоколам TCP/IP и используемый для коммуникаций между брокерами объектных запросов CORBA.</p>
        <br>
	<p><b>if</b><p>Ключевое слово языка программирования Java, предназначенное для проверки условия и выполнения блока инструкций, если проверка дала положительный результат (true).</p>
        <br>
	<p><b>impersonation (заимствование прав)</b><p>Процесс, при котором одна сущность принимает идентичность и привилегии другой сущности без ее уведомления о том, что произошло делегирование. Заимствование прав - это случай простого делегирования.</p>
        <br>
	<p><b>implements</b><p>Ключевое слово языка программирования Java, включаемое при необходимости в объявление класса, для определения интерфейсов, которые реализует данный класс.</p>
        <br>
	<p><b>import</b><p>Ключевое слово языка программирования Java, определяющее классы или целые пакеты, на которые может ссылаться программа, без включения названий пакетов в ссылку.</p>
        <br>
	<p><b>inheritance (наследование)</b><p>Концепция классов, автоматически включающих все переменные и методы, определенные в супертипе.</p>
        <br>
	<p><b>initialization parameter (параметр инициализации)</b><p>Параметр, который инициализирует контекст, связанный с сервлетом.</p>
        <br>
	<p><b>instance (экземпляр)</b><p>Объект класса. В программах, написанных на языке Java, экземпляр класса создается при помощи оператора new, за которым следует имя класса-типа.</p>
        <br>
	<p><b>instance method (метод экземпляра)</b><p>Любой метод, который вызван от имени экземпляра класса. Также называется просто метод.</p>
        <br>
	<p><b>instance variable (переменная экземпляра)</b><p>Любой элемент данных, связанный с объектом. Каждый экземпляр класса имеет собственную копию переменной, определенной в классе. Также носит название поля.</p>
        <br>
	<p><b>instanceof</b><p>Ключевое слово языка программирования Java, имеющее два аргумента и проверяющее, является ли тип первого аргумента преобразуемым к типу второго аргумента.</p>
        <br>
	<p><b>int</b><p>Ключевое слово языка программирования Java, используемое для определения переменной целого типа (integer).</p>
        <br>
	<p><b>interface</b><p>Ключевое слово языка программирования Java, используемое для определения набора методов и постоянных значений (класса специального вида). Интерфейс в дальнейшем может реализовываться классами, которые определяют этот интерфейс с ключевым словом implements.</p>
        <br>
	<p><b>Internet (Интернет, международная компьютерная сеть)</b><p>Огромная сеть, состоящая из миллионов компьютеров многих организаций и стран всего мира. Физически сеть Internet составлена из большого количества сетей, причем данные передаются при помощи единого набора протоколов.</p>
        <br>
	<p><b>Internet Protocol - IP (протокол сети Интернет)</b><p>Основной протокол Internet. Осуществляет ненадежную доставку индивидуальных пакетов от одного компьютера другому. Не дает никаких гарантий о том, будет ли доставлен пакет, сколько времени займет доставка, придут ли групповые пакеты в том порядке, в котором они были посланы. Протоколы, надстроенные над IP, добавляют понятия связности и надежности.</p>
        <br>
	<p><b>interpreter (интерпретатор)</b><p>Программа, которая поочередно декодирует и исполняет каждую инструкцию кода. Интерпретатор Java декодирует и выполняет код для виртуальной машины Java*.</p>
        <br>
	<p><b>Independent Software Vendor - ISV (независимый поставщик ПО)</b><p>Фирма, разрабатывающая программное обеспечение для платформы, созданной другой организацией.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="j">J</h3>
        <p><b>J2EE application (приложение J2EE)</b><p>Любой составной модуль, поддерживающий функциональность J2EE. Это может быть один модуль или группа модулей, упакованных в .war-файл, содержащий дескриптор размещения J2EE-приложения. Приложения J2EE обычно проектируются так, что они распределены по нескольким вычислительным уровням.</p>
        <br>
	<p><b>J2EE product (продукт J2EE)</b><p>Продукт разработки, соответствующий спецификации платформы J2EE.</p>
        <br>
	<p><b>J2EE Product Provider (поставщик продуктов J2EE)</b><p>Производитель, поставляющий продукты J2EE.</p>
        <br>
	<p><b>J2EE server (сервер J2EE)</b><p>Исполняемая часть продукта J2EE. Сервер J2EE обеспечивает Web и/или EJB-контейнеры.</p>
        <br>
	<p><b>Java ARchive files (.jar) (JAR-файлы)</b><p>Файловый формат, используемый для группирования нескольких файлов в один.</p>
        <br>
	<p><b>JAR file format (файловый формат JAR)</b><p>Платформно-независимый файловый формат, соединяющий несколько файлов в один. Составные апплеты, написанные на языке Java, и необходимые для них компоненты (.class-файлы, изображения, звуковые и другие файлы) могут быть упакованы в JAR-файл и затем загружены в браузер за одну HTTP-транзакцию. Данный формат также поддерживает сжатие файлов и цифровые подписи.</p>
        <br>
	<p><b>Java</b><p>Торговая марка компании Sun для ряда технологий по созданию и безопасной работе программного обеспечения как в автономных, так и в сетевых средах.</p>
        <br>
	p><b>Java Application Environment - JAE</b><p>Версия исходного кода программного обеспечения Java Development Kit (JDK).</p>
        <br>
	<p><b>Java APIs for Integrated Networks - JAIN</b><p>Дает возможность быстрой разработки продуктов и сервисов, использующих сетевые взаимодействия, на платформе Java.</p>
        <br>
	<p><b>Java 2 Platform, Standard Edition (J2SE platform) (платформа J2SE)</b><p>Ядро платформы технологии Java.</p>
        <br>
	<p><b>Java 2 Platform, Enterprise Edition (J2EE platform) (платформа J2EE)</b><p>Среда для разработки корпоративных приложений. Платформа J2EE состоит из набора услуг, интерфейсов прикладного программирования (APIs) и протоколов, обеспечивающих функциональные возможности для разработки многоуровневых Web-приложений.</p>
        <br>
	<p><b>Java 2 SDK, Enterprise Edition</b><p>Реализация платформы J2EE компании Sun. Данная реализация включает описание работы платформы J2EE.</p>
        <br>
	<p><b>JavaBeans</b><p>Модель переносимых платформонезависимых компонентов многократного использования.</p>
        <br>
	<p><b>Java Blend</b><p>Продукт, позволяющий разработчику упростить разработку приложений баз данных при помощи отображения записей баз данных в объекты языка Java и Java-объектов - в базы данных.</p>
        <br>
	<p><b>Java Card API</b><p>API для систем с минимальным набором ресурсов, в частности для смарт-карт. Среда прикладных программных средств, соответствующая стандарту ISO 7816-4 для интеллектуальных карт.</p>
        <br>
	<p><b>JavaCheck</b><p>Инструмент для проверки соответствия приложений и апплетов языка Java.</p>
        <br>
	<p><b>JavaChip</b><p>Процессор фирмы Sun, выполняющий байт-код виртуальной машины Java*. На компьютере с процессором JavaChip байт-код минует эмуляцию Java-машины на какой-либо платформе, исполняясь непосредственно аппаратным процессором.</p>
        <br>
	<p><b>Java Compatibility Kit (JCK)</b><p>Набор испытательных программ и инструментальных средств, используемых для проверки совместимости реализации платформы Java соответствующим спецификациям Java-платформ, а также эталонным реализациям программ Java. TCK для Java 2 Standard Edition.</p>
        <br>
	<p><b>Java Database Connectivity - JDBC (интерфейс JDBC)</b><p>Промышленный стандарт для независимого от базы данных взаимодействия Java-платформы и широкого диапазона баз данных. JDBC определяет API для доступа к базам данных из Java-приложений.</p>
        <br>
	<p><b>Java Developer Connection</b><p>Служба, предназначенная для индивидуальных разработчиков, предоставляющая интерактивное обучение, скидки на продукты, специальные статьи, информацию об ошибках, а также возможности раннего доступа к новым продуктам.</p>
        <br>
	<p><b>Java Development Kit - JDK (комплект разработчика для Java)</b><p>Среда программирования для написания апплетов и приложений в языке программирования Java.</p>
        <br>
	<p><b>Java Electronic Commerce Framework</b><p>Структурированная архитектура для разработки приложений электронной коммерции в языке программирования Java.</p>
        <br>
	<p><b>Java Enterprise API</b><p>Данный API упрощает создание крупномасштабных приложений и приложений баз данных, которые совместно используют мультимедийные данные с другими приложениями в пределах организации или через Internet. В семействе Java Enterprise API разработано четыре интерфейса прикладного программирования.</p>
        <br>
	<p><b>Java Foundation Classes - JFC (библиотека базовых классов Java)</b><p>Дополнительные библиотеки классов графического пользовательского интерфейса (Graphical User Interface - GUI), добавляемые к абстрактному оконному интерфейсу (Abstract Window Toolkit - AWT).</p>
        <br>
	<p><b>Java IDL</b><p>Технология, обеспечивающая функциональную совместимость и способность к взаимодействию CORBA и J2EE-платформы. Эти возможности позволяют приложениям J2EE вызывать операции удаленных сетевых служб, используя OMG IDL и IIOP.</p>
        <br>
	<p><b>Java Interface Definition Language (IDL)</b><p>API, написанные на языке программирования Java, которые обеспечивают функциональную совместимость и способность к взаимодействию с CORBA (Common Object Request Broker Architecture).</p>
        <br>
	<p><b>JavaMail</b><p>API для отправки и получения сообщений.</p>
        <br>
	<p><b>Java Media APIs</b><p>Набор интерфейсов прикладного программирования (APIs) для интеграции аудио и видео файлов, двумерных шрифтов, графики и изображений, а также трехмерных моделей и телефонии.</p>
        <br>
	<p><b>Java Media Framework</b><p>Ядро структуры поддерживает часы для синхронизации различных потоков (например, аудио и видео сигналов). Standard extension framework позволяет пользователям организовать потоки аудио и видео информации.</p>
        <br>
	<p><b>Java Message Service - JMS</b><p>Интерфейс прикладного программирования (API) для использования корпоративных систем передачи сообщений, таких как IBM MQ Series, TIBCO Rendezvous и т.д.</p>
        <br>
	<p><b>Java Naming and Directory Interface (JNDI)</b><p>Стандартный API к корпоративной службе каталогов.</p>
        <br>
	<p><b>JavaOS (операционная система Java)</b><p>Операционная система, основанная на технологии Java и оптимизированная для работы на различных платформах. Операционная среда JavaOS обеспечивает работу Java-приложений непосредственно на аппаратных платформах, минуя ведущую операционную систему.</p>
        <br>
	<p><b>JavaPlan</b><p>Инструмент для объектно-ориентированного проектирования и схематического изображения, написанный на языке программирования Java.</p>
        <br>
	<p><b>Java Platform (платформа Java)</b><p>Состоит из языка Java, предназначенного для написания программ, набора интерфейсов прикладного программирования (APIs), библиотек классов, других программ, используемых при разработке и компиляции, программ проверки ошибок, а также виртуальной машины Java, которая загружает и выполняет файлы классов. Кроме того, платформа Java подчиняется набору требований совместимости для гарантии непротиворечивых и совместимых реализаций. Реализации, выполняющие требования совместимости, могут приобретать квалификацию заданной марки совместимости фирмы Sun. Java 2 - настоящее поколение платформы Java.</p>
        <br>
	<p><b>Java Platform Editions (издания платформы Java</b><p>"Издание" платформы Java - это окончательная и согласованная версия платформы Java, которая обеспечивает функциональные возможности, необходимые в широком секторе рынка. Издание составлено из двух видов API: (i) "основные пакеты", которые являются необходимыми для всех реализаций данного издания платформы; (ii) "дополнительные пакеты", которые доступны данному изданию платформы и могут поддерживаться совместимыми реализациями. 
	<p>Существует три различных издания платформы Java:
	<p>• Java 2 Platform, Enterprise Edition: Издание платформы Java, используемое на предприятиях и предназначенное для разработки и развития многоуровневых приложений, управляемых центральным сервером. 
	<p>• Java 2 Platform, Standard Edition: Издание платформы Java, предназначенное для разработки, развития и управления межплатформенными универсальными приложениями. 
	<p>• Java 2 Platform, Micro Edition: Издание платформы Java, предназначенное для малых автономных потребителей, с целью разработки, развития и управления приложений, варьирующихся от смарт-карт до обычных вычислительных устройств.</p>
        <br>
	<p><b>Java Remote Method Invocation (RMI)</b><p>Распределенная объектная модель для Java-программы, в которой методы и удаленные объекты, написанные на языке программирования Java, могут быть вызваны другой виртуальной машиной Java, возможно, расположенной на другом компьютере.</p>
        <br>
	<p><b>Java Runtime Environment (JRE)</b><p>Подмножество комплекта разработчика Java (Java Developer Kit - JDK) для конечных пользователей и разработчиков, которые хотят самостоятельно настроить оперативные средства управления работой программы (run-time environment). Оперативные средства включают в себя виртуальную машину Java*, классы ядра Java и вспомогательные файлы.</p>
        <br>
	<p><b>JavaSafe</b><p>Инструмент для отслеживания и управления изменениями исходного файла, написанного на языке программирования Java.</p>
        <br>
	<p><b>Java Server Pages (JSP)</b><p>Расширяемая Web-технология, использующая данные шаблона, заказные элементы, языки сценариев и серверные объекты Java для предоставления клиенту динамического содержания. Обычно, данные шаблона - это HTML или XML элементы, а клиент - это Web-браузер.</p>
        <br>
	<p><b>JAX</b><p>JAX относится к набору интерфейсов прикладного программирования (APIs), который предназначен для управления различными операциями, включающими данные, определенные посредством XML. Сюда входят такие операции как синтаксический анализ XML, регистрация в репозиториях ebXML или UDDI, обмен сообщениями между приложениями, привязка данных и удаленный вызов процедур.</p>
        <br>
	<p><b>JSP action (действие Java Server Pages {JSP})</b><p>JSP элемент, который может действовать на неявные объекты и другие серверные объекты или определять новые переменные создания сценария. Действия придерживаются синтаксиса XML для элементов с начальным тэгом, телом и конечным тэгом; если тело пусто, может использоваться синтаксис пустого тэга. Тэг должен использовать префикс.</p>
        <br>
	<p><b>JSP action, standard (стандартное действие Java Server Pages)</b><p>Действие, которое определено спецификацией JSP и всегда доступно JSP-файлу без импортирования.</p>
        <br>
	<p><b>JSP action, custom (специальное действие Java Server Pages)</b><p>Действие, описанное с помощью тэгов и набора классов Java, включенных в страницу JSP с помощью тэговых дескрипторов.</p>
        <br>
	<p><b>JSP application (приложение JSP)</b><p>Автономное Web- приложение, написанное с использованием технологии Java Server Pages и включающее JSP файлы, сервлеты, HTML файлы, изображения, апплеты и компоненты JavaBeans.</p>
        <br>
	<p><b>JSP container (контейнер JSP)</b><p>Контейнер, предоставляющий те же услуги, что и сервлет-контейнер, а также механизм интерпретации и переработки JSP страниц в сервлеты.</p>
        <br>
	<p><b>JSP container, distributed (распределенный контейнер JSP)</b><p>JSP контейнер, который может запускать Web-приложения, помеченные как распределенные и выполняемые одновременно на нескольких виртуальных машинах Java. При этом виртуальные машины могут быть запущены, как на одном, так и на разных компьютерах.</p>
        <br>
	<p><b>JSP declaration (объявление JSP)</b><p>Элемент сценариев JSP, который объявляет методы и переменные в JSP файле.</p>
        <br>
	<p><b>JSP directive (директива JSP)</b><p>Элемент JSP, который дает команды JSP контейнеру и интерпретируется во время трансляции.</p>
        <br>
	<p><b>JSP element (элемент JSP)</b><p>Часть JSP страницы, которая распознается JSP транслятором. Элемент JSP может быть директивой, действием или элементом сценария.</p>
        <br>
	<p><b>JSP expression (выражение JSP)</b><p>Элемент сценария, который содержит допустимое выражение языка сценариев, вычисленное, преобразованное в строку и помещенное в неявный выходной объект.</p>
        <br>
	<p><b>JSP file (файл JSP)</b><p>Файл с расширением .jsp, который создается разработчиком при помощи стандартных тэгов HTML, основных JSP тэгов и инструкций языка сценариев, для отображения динамических страниц в Web-браузере.</p>
        <br>
	<p><b>JSP page (страница JSP)</b><p>Текстовый документ, использующий фиксированные шаблонные данные и элементы JSP. Описывает, как обработать запрос.</p>
        <br>
	<p><b>JSP элемент сценария</b><p>Объявление JSP, скриптлет или выражение, синтаксис которого определен спецификацией JSP и содержимое которого написано согласно языку сценариев, используемому в странице JSP. Спецификация JSP описывает синтаксис и семантику для того случая, когда атрибут языка страницы - java.</p>
        <br>
	<p><b>JSP scriptlet (скриптлет JSP)</b><p>Элемент сценария JSP, содержащий любой фрагмент кода, допустимый в том языке сценариев, который используется на JSP странице. Спецификация JSP определяет, что является допустимым скриптлетом для того случая, когда атрибут языка страницы - java.</p>
        <br>
	<p><b>JSP tag (тэг JSP)</b><p>Текст между левой и правой угловыми скобками, который используется в файлах JSP, как часть элемента JSP. В отличие от данных, тэг является элементом разметки документа, т.к. он выделен угловыми скобками.</p>
        <br>
	<p><b>JSP tag library (библиотека тэгов JSP)</b><p>Совокупность тэгов, описанных посредством библиотечных дескрипторов и классов Java. Библиотека тэгов JSP может импортироваться в любой JSP файл и использоваться с различными языками сценариев.</p>
        <br>
	<p><b>Java Technologies (технологии Java)</b><p>Ряд технологий по созданию и безопасной работе программного обеспечения, как в автономных, так и в сетевых средах.</p>
        <br>
	<p><b>Java Transaction API (JTA)</b><p>API, позволяющий приложениям и сервлетам J2EE иметь доступ к транзакциям.</p>
        <br>
	<p><b>Java Transaction Service (JTS)</b><p>Определяет реализацию менеджера транзакций, который поддерживает JTA и осуществляет Java отображение спецификации OMG Object Transaction Service (OTS) 1.1 на уровень ниже API.</p>
        <br>
	<p><b>Java virtual machine - JVM (виртуальная машина Java)</b><p>Программный "механизм выполнения", который безопасно выполняет байт-коды файлов классов Java на микропроцессоре (компьютера или другого электронного устройства). <p>Механизм выполнения Java HotSpot - это высокоэффективный механизм для среды выполнения Java программ, который представляет собой адаптивный компилятор, динамически оптимизирующий работу приложений. <p>Виртуальная машина KJava - малогабаритная, высоко оптимизированная основа среды выполнения программ (runtime environment) в Java 2 Platform, Micro Edition. KJava разработана на основе виртуальной машины Java и предназначена для малых устройств связи. Ее размер составляет от 30 до 128 Кб, в зависимости от функциональных возможностей устройства. Виртуальная машина Java Card - малогабаритная, высоко оптимизированная основа среды выполнения программ (runtime environment) в Java 2 Platform, Micro Edition. KJava разработана на основе виртуальной машины Java и предназначена для смарт-карт и других устройств с ограниченной памятью (порядка 24Кб ПЗУ, 16Кб EEPROM и 512б ОЗУ).</p>
        <br>
	<p><b>Java Web Server (Web-сервер Java)</b><p>Удобное, открытое, легко администрируемое, безопасное, платформонезависимое решение для ускорения и простоты разработки Internet/Intranet Web-страниц. Обеспечивает немедленное повышение производительности для трудоемких, полнофункциональных серверных приложений Java.</p>
        <br>
	<p><b>Java Workshop</b><p>Законченный набор инструментов, интегрированный в единую среду программирования с использованием Java технологий. Программное обеспечение Java Workshop использует модульную структуру, которая позволяет легко подключать новые инструментальные средства.</p>
        <br>
	<p><b>Java wallet</b><p>Пользовательский интерфейс, основанный на Java Electronic Commerce Framework, предназначенный для осуществления интерактивных покупок, передачи данных и выполнения административных функций.</p>
        <br>
	<p><b>JavaSpaces</b><p>Технология, содержащая механизмы распределенной работы и обмена данными при программировании на языке Java.</p>
        <br>
	<p><b>JavaSoft</b><p>Ранее филиал компании Sun Microsystems, в настоящее время известный как подразделение Sun Microsystems Java Software.</p>
        <br>
	<p><b>Jini Technology (технология Jini)</b><p>Набор интерфейсов прикладного программирования (APIs) Java, которые могут быть включены в дополнительный пакет к любому изданию платформы Java 2. Jini позволяет обеспечивать совместную работу в сети различных устройств и служб, а также устраняет необходимость системного или сетевого административного вмешательства пользователя. <p>В настоящее время технология Jini является дополнительным пакетом, доступным любой Java платформе.</p>
        <br>
	<p><b>Java Management API – JMAPI</b><p>Совокупность Java классов и интерфейсов, позволяющих разработчику создавать системные, сетевые и служебные приложения.</p>
        <br>
	<p><b>JPEG - Joint Photographic Experts Group (стандарт JPEG)</b><p>Стандарт сжатия файлов изображений, установленный группой экспертов по машинной обработке фотографических изображений. Сильное сжатие достигается ценой внесения искажений в изображение, которые почти всегда являются незаметными.</p>
        <br>
	<p><b>Just-in-time (JIT) Compiler (компилятор JIT)</b><p>Компилятор, динамически ("на лету") преобразующий байт-код в объектный код целевой платформы. Его применение приводит к значительному ускорению выполнения Java-программы.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="k">K</h3>
        <p><b>keyword (ключевое слово)</b><p>Слово, которое зарезервировано языком программирования Java, и поэтому не может быть именем переменной или метода.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="l">L</h3>
        <p><b>lexical (лексический)</b><p>Соответствующий уровню лексем (идентификаторов, чисел, изображений строк и т.д.) языка программирования. Лексический анализ - фаза компилятора, на которой последовательность символов файла исходного текста преобразуется в последовательность лексем.</p>
        <br>
	<p><b>linker (компоновщик)</b><p>Модуль, который формирует запускаемую, законченную программу из составных модулей машинного кода. Компоновщик Java создает работоспособную программу из откомпилированных классов.</p>
        <br>
	<p><b>literal (литерал)</b><p>Основное представление любого целого, символьного значения или значения с плавающей запятой. Например, 3.0 - литерал с плавающей запятой двойной точности, "а" - символьный литерал.</p>
        <br>
	<p><b>local variable (локальная переменная)</b><p>Элемент данных, известный в пределах блока, но недоступный вне блока. Например, любая переменная, определенная внутри метода, является локальной и не может использоваться вне этого метода.</p>
        <br>
	<p><b>long</b><p>Ключевое слово языка программирования Java, используемое для определения переменных типа long.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="m">M</h3>
        <p><b>member (элемент)</b><p>Поле или метод класса. Пока не оговорено обратное, член не является статическим.</p>
        <br>
	<p><b>method (метод)</b><p>Функция, определенная в классе.Пока не оговорено обратное, метод не является статическим.</p>
        <br>
	<p><b>method permission (разрешение на вызов метода)</b><p>Разрешение на вызов указанной группы методов "домашнего" или удаленного интерфейса корпоративного компонента (enterprise bean).</p>
        <br>
	<p><b>module (модуль)</b><p>Программный модуль, который состоит из одного или более компонентов J2EE, принадлежащих контейнеру одного типа, и из дескриптора размещения этого типа. Существует три типа модулей: EJB, Web и клиентские приложения. Модули можно использовать автономно или собирать в приложения.</p>
        <br>
	<p><b>Mosaic</b><p>Программа c несложным графическим интерфейсом (GUI), предназначенная для простого доступа к данным, хранящимся в Internet. Данные могут быть обычными файлами или гипертекстовыми документами. Mosaic была разработана в NCSA.</p>
        <br>
	<p><b>multithreaded (многопоточный)</b><p>Описывает программу, спроектированную и реализованную в виде совокупности параллельных потоков управления (threads), синхронизированных между собой по общим ресурсам и событиям.</p>
        <br>
	<p><b>mutual authentication (взаимная аутентификация)</b><p>Процесс, при котором клиент использует сертификат с открытым ключом для установления своей идентичности и поддерживает защиту своего контекста.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="n">N</h3>
        <p><b>native</b><p>Ключевое слово языка программирования Java, используемое в объявлении метода для указания на то, что метод реализован не в файле Java, а на другом языке.</p>
        <br>
	<p><b>National Center for Supercomputer Applications - NCSA (Национальный центр по приложениям для суперкомпьютеров)</b><p>Исследовательский центр, в котором была разработана программа Mosaic.</p>
        <br>
	<p><b>new</b><p>Ключевое слово языка программирования Java, используемое для создания нового экземпляра класса.</p>
        <br>
	<p><b>null</b><p>Тип null имеет единственное значение - "пустую" ссылку, представленную литералом null, который сформирован из символов ASCII. Литерал null всегда имеет тип null.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="o">O</h3>
        <p><b>object (объект)</b><p>Основной компоновочный блок объектно-ориентированных программ. Каждый объект программного модуля состоит из данных (переменные экземпляра) и функциональных возможностей (методы экземпляра).</p>
        <br>
	<p><b>object-oriented design (объектно-ориентированное проектирование)</b><p>Метод проектирования программного обеспечения, позволяющий моделировать абстрактные или реальные объекты при помощи классов и объектов.</p>
        <br>
	<p><b>octal (восьмеричный)</b><p>Система счисления с основанием 8. Знаки 0-7 представляют цифры. В программе, написанной на языке Java, восьмеричные числа должны начинаться с символа 0.</p>
        <br>
	<p><b>Open Net Environment - ONE (открытое сетевое окружение)</b><p>Сетевая среда, которая была разработана компанией Sun Microsystems и поддержана многими ведущими производителями. Описывает всестороннюю архитектуру для создания, сборки и использования сетевых услуг. ONE платформонезависима и полностью основана на открытых стандартах. Sun ONE - конкретная реализация данной архитектуры, разработанная компаниями Sun и iPlanet.</p>
        <br>
	<p><b>Optional Package (дополнительный пакет)</b><p>Набор API в издании платформы Java, который может быть доступным или поддерживаться в совместимой реализации. <p>По мере необходимости, дополнительные пакеты могут становиться необходимыми в издании.</p>
        <br>
	<p><b>Object Request Broker - ORB (посредник запросов к объектам)</b><p>Библиотека, позволяющая объектам CORBA определять местонахождение и устанавливать связь друг с другом.</p>
        <br>
	<p><b>OS principal (принцип)</b><p>Свойство (principal), присущее той операционной системе, на которой запущена платформа J2EE.</p>
        <br>
	<p><b>Object Transaction Service (OTS)</b><p>Интерфейсы, позволяющие объектам CORBA участвовать в транзакциях.</p>
        <br>
	<p><b>overloading (перегрузка {операций})</b><p>Использование одного идентификатора для ссылки на разные элементы в одной области действия. В языке программирования Java можно перегружать методы, однако, нельзя перегружать переменные или операторы.</p>
        <br>
	<p><b>overriding (замещение)</b><p>Означает другую реализацию метода в подклассе класса, первоначально определившего метод.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="p">P</h3>
        <p><b>package (пакет)</b><p>Группа типов. Пакеты объявляются при помощи ключевого слова package.</p>
        <br>
	<p><b>passivation (пассивация)</b><p>Процесс передачи корпоративного компонента (enterprise bean) из памяти во вторичное устройство хранения данных.</p>
        <br>
	<p><b>peer (одноранговые)</b><p>В организации сетей любые функциональные единицы, находящиеся на одном уровне.</p>
        <br>
	<p><b>persistence</b><p>Протокол передачи состояния сущности (entity bean) между переменными ее экземпляра и базой данных.</p>
        <br>
	<p><b>PersonalJava</b><p>Среда выполнения Java для сетевых приложений на персональных устройствах потребителя (домашнего, мобильного или офисного использования).</p>
        <br>
	<p><b>pixel (пиксель)</b><p>Элемент площади изображения, например, экрана монитора или напечатанной страницы. Каждый пиксель является индивидуально доступным.</p>
        <br>
	<p><b>Portable Object Adapter - POA</b><p>Стандарт CORBA для создания серверных приложений, которые переносимы между различными посредниками запросов к объектам (ORBs).</p>
        <br>
	<p><b>Portable Operating System Interface - POSIX (интерфейс переносимой операционной системы)</b><p>Стандарт, который определяет языковой интерфейс между операционной системой UNIX и прикладными программами посредством минимального набора поддерживаемых функций.</p>
        <br>
	<p><b>primary key (первичный ключ)</b><p>Объект, уникально идентифицирующий сущность (entity bean).</p>
        <br>
	<p><b>principal (принцип)</b><p>Отличительная черта, присвоенная сущности в результате аутентификации.</p>
        <br>
	<p><b>private</b><p>Ключевое слово языка программирования Java, используемое при объявлении метода или переменной. Указывает на то, что к методу или переменной класса не могут обращаться элементы других классов.</p>
        <br>
	<p><b>privilege (привилегия)</b><p>Атрибут защиты, который не имеет свойства уникальности и который может быть использован несколькими principals. Пример привилегии - группа.</p>
        <br>
	<p><b>process (процесс)</b><p>Виртуальное адресное пространство, содержащее один или более потоков.</p>
        <br>
	<p><b>property (свойство)</b><p>Характеристика объекта, которую может устанавливать пользователь. Например, цвет окна.</p>
        <br>
	<p><b>Profiles (профили)</b><p>Наборы Java API, которые служат дополнением к изданиям платформ Java и обеспечивают дополнительные возможности. Профили также могут включать другие определенные профили. Реализация профиля нуждается в издании Java Platform для создания законченной разработки и среды ее использования на целевом вертикальном рынке. Каждый профиль подчиняется связанному набору требований совместимости. <p>Профили могут использоваться одним или несколькими изданиями. <p>Примеры профилей в Java 2 Platform, Micro Edition: PersonalJava, Java Card.</p>
        <br>
	<p><b>protected</b><p>Ключевое слово языка программирования Java, используемое при объявлении метода или переменной. Указывает на то, что к методу или переменной класса могут обращаться другие элементы данного класса, его подклассов или классов из того же пакета.</p>
        <br>
	<p><b>private</b><p>Ключевое слово языка программирования Java, используемое при объявлении метода или переменной. Указывает на то, что к методу или переменной класса могут обращаться элементы других классов.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="r">R</h3>
	<p><b>raster (растр)</b><p>Двумерная прямоугольная сетка пикселей.</p>
        <br>
	<p><b>realm (область)</b><p>Строка, проходящая базовую аутентификацию, как часть HTTP-запроса, которая определяет пространство защиты. Защищенные ресурсы на сервере могут находиться в разных пространствах защиты, каждое со своей схемой аутентификации и/или базой данных авторизации.</p>
        <br>
	<p><b>re-entrant enterprise bean (реентерабельный корпоративный компонент)</b><p>Корпоративный компонент, который может обрабатывать несколько одновременных или вложенных вызовов, не пересекающихся друг с другом.</p>
        <br>
	<p><b>reference (ссылка)</b><p>Элемент данных, значение которого является адресом памяти.</p>
        <br>
	<p><b>Reference Implementation - RI (ссылочная реализация)</b><p>Прототип реализации спецификации Java-технологии. Является неотъемлемой частью любой Java-технологии и служит доказательством того, что данная Java-технология может быть реализована на практике.</p>
        <br>
	<p><b>remote interface (удаленный интерфейс)</b><p>Один из двух интерфейсов корпоративной компоненты (enterprise bean). Удаленный интерфейс определяет бизнес-методы, вызываемые клиентом.</p>
        <br>
	<p><b>remove method (метод удаления)</b><p>Метод, определенный в "домашнем" интерфейсе и вызываемый клиентом для уничтожения корпоративной компоненты (enterprise bean).</p>
        <br>
	<p><b>resource adapter (адаптер ресурсов)</b><p>Программный драйвер системного уровня, используемый EJB-контейнером или клиентским приложением для связи с EIS. Адаптер ресурсов специфичен для каждой EIS. Он представляет собой библиотеку, и используется в пределах адресного пространства сервера или клиента, которые используют адаптер. Адаптер ресурсов подключается к контейнеру. Прикладные компоненты, содержащиеся в контейнере, используют API (представленный адаптером) или инструментально созданные высокоуровневые абстракции для доступа к низкоуровневой EIS. Адаптер ресурса и EJB-контейнер взаимодействуют для того, чтобы обеспечить низкоуровневые механизмы - транзакции, безопасность, организация связного пула - для связи с EIS.</p>
        <br>
	<p><b>resource manager (менеджер ресурсов)</b><p>Обеспечивает клиенту доступ к набору общедоступных ресурсов. Менеджер ресурсов участвует в транзакциях, которые управляются и координируются менеджером транзакций. Менеджер ресурсов обычно находится в другом адресном пространстве или на другой машине. Замечание: к EIS обращаются, как к менеджеру ресурсов, когда она упомянута в контексте управления ресурсами и транзакциями.</p>
        <br>
	<p><b>resource manager connection (соединение с менеджером ресурсов)</b><p>Объект, представляющий собой сеанс связи с менеджером ресурсов.</p>
        <br>
	<p><b>resource manager connection factory (мастер соединения с менеджером ресурсов)</b><p>Объект, используемый для создания сеанса связи с менеджером ресурсов.</p>
        <br>
	<p><b>return</b><p>Ключевое слово языка программирования Java, используемое для окончания выполнения метода. За ним может следовать значение, возвращаемое методом.</p>
        <br>
	<p><b>role (development) (роль разработки)</b><p>Функция, выполняемая человеком в стадии развития приложения, разрабатываемого с помощью технологии J2EE. Примеры ролей: поставщик программных компонент (Application Component Provider), компоновщик приложения (application assembler), "разместитель" (deployer), поставщик платформы J2EE (J2EE Platform Provider), поставщик EJB-контейнера (EJB Container Provider), поставщик EJB-сервера (EJB Server Provider), поставщик Web-контейнера (Web Container Provider), поставщик Web-сервера (Web Server Provider), поставщик инструментов (Tool Provider), системный администратор (System Administrator).</p>
        <br>
	<p><b>role (security) (роль безопасности)</b><p>Абстрактная логическая группировка пользователей, осуществляемая компоновщиком приложения. Когда приложение установлено, роли ставятся в соответствие идентичностям безопасности, таким как principals или группы.</p>
        <br>
	<p><b>role mapping (распределение ролей)</b><p>Процесс объединения групп, распознанных контейнером, в роли безопасности, которые определены в дескрипторе размещения. Роли безопасности должны быть составлены "разместителем" перед установкой контейнера на сервер.</p>
        <br>
	<p><b>rollback (откат)</b><p>Момент транзакции, когда все изменения, вносимые в базу данных, отменяются.</p>
        <br>
	<p><b>root (корень)</b><p>Элемент иерархии, из которого происходят все элементы. Ни один элемент не может находиться в иерархии выше "корня".</p>
        <br>
	<p><b>Remote Procedure Call - RPC (вызов удаленной процедуры)</b><p>Протокол, позволяющий приложениям вызывать процедуры, физически расположенные в другой части сети.</p>
        <br>
	<p><b>runtime system (система поддержки исполнения программ)</b><p>Программная среда, в которой могут работать программы, откомпилированные для виртуальной машины Java*. Система поддержки исполнения включает весь код, необходимый для того, чтобы загружать программы, написанные на Java, динамически связывать "родные" методы, управлять памятью, обрабатывать исключительные ситуации, а также реализацию виртуальной машины Java.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="s">S</h3>
	<p><b>Simple API for XML - SAX (простой API для XML)</b><p>Управляемый событиями, последовательный механизм доступа к XML документам.</p>
        <br>
	<p><b>Sandbox</b><p>Содержит множество взаимодействующих системных компонент, начиная от менеджеров безопасности, которые выполняются как часть приложения, и заканчивая мерами безопасности, встроенными непосредственно в виртуальную машину Java* и язык Java. Sandbox гарантирует, что ненадежные и, возможно, злонамеренные приложения не смогут получить доступ к системным ресурсам.</p>
        <br>
	<p><b>scope (область действия)</b><p>Характеристика идентификатора, определяющая, где может использоваться данный идентификатор. Большинство идентификаторов в языке программирования Java имеют либо локальную область действия, либо область действия - класс. Для переменных экземпляров и классов, а также методов областью действия является класс; они могут использоваться вне класса и его подклассов, только если перед ними ставится имя экземпляра класса или (в случае переменных и методов класса) имя самого класса. Все другие переменные объявляются внутри методов и имеют локальную область действия; они могут использоваться только внутри блока.</p>
        <br>
	<p><b>Secure Socket Layer - SSL (протокол безопасных соединений)</b><p>Протокол, который позволяет шифровать сообщения, передаваемые между Web-браузером и сервером в целях безопасности.</p>
        <br>
	<p><b>security attributes (атрибуты безопасности)</b><p>Набор свойств, связанных с principal. Атрибуты безопасности могут быть связаны с principal посредством протокола аутентификации и/или поставщиком продуктов J2EE (J2EE Product Provider).</p>
        <br>
	<p><b>security constraint (ограничения безопасности)</b><p>Декларативный способ аннотирования необходимой защиты содержимого сети. Ограничение безопасности состоит из совокупности Web-ресурсов, ограничения авторизации, ограничения пользовательских данных.</p>
        <br>
	<p><b>security context (контекст безопасности)</b><p>Объект, включающий разделяемые свойства для описания безопасности сущностей.</p>
        <br>
	<p><b>security permission (право безопасности)</b><p>Механизм, определенный J2SE и используемый платформой J2EE для определения программных ограничений, наложенных на поставщиков программных компонент (Application Component Providers).</p>
        <br>
	<p><b>security permission set (набор прав безопасности)</b><p>Минимальный набор прав безопасности, обеспечиваемый поставщиком программных компонент (Application Component Provider) для выполнения каждого типа компонент.</p>
        <br>
	<p><b>security policy domain (область политики безопасности)</b><p>Область, в переделах которой определена и приведена в исполнение администратором политика безопасности. Область политики безопасности имеет следующие характеристики: 
	<p>• обладает набором пользователей (или principals); 
	<p>• использует хорошо определенный протокол аутентификации пользователей (или principals); 
	<p>• может иметь группы для упрощения настройки политики безопасности.</p>
        <br>
	<p><b>security technology domain (область технологии безопасности)</b><p>Область, в пределах которой для осуществления политики безопасности используется один и тот же механизм. В пределах единой области технологии безопасности может существовать несколько областей политики безопасности.</p>
        <br>
	<p><b>server principal</b><p>Принцип ОС, в соответствии с которым работает сервер.</p>
        <br>
	<p><b>servlet (сервлет)</b><p>Java программа, которая расширяет функциональные возможности Web-сервера, динамически генерируя содержание и взаимодействуя с Web-клиентами при помощи принципа запрос-ответ.</p>
        <br>
	<p><b>servlet container (контейнер сервлета)</b><p>Контейнер, обеспечивающий сетевые службы, при помощи которых посылаются запросы и ответы, декодируются запросы и форматируются ответы. Все контейнеры сервлетов должны поддерживать HTTP-протокол, но могут также поддерживать дополнительные протоколы, например, HTTPS.</p>
        <br>
	<p><b>servlet container, distributed (распределенный контейнер сервлета)</b><p>Контейнер сервлета, запускающий Web-приложения, которые помечены как распределенные и выполняются на нескольких виртуальных машинах Java. При этом виртуальные машины могут быть запущены, как на одном, так и на разных компьютерах.</p>
        <br>
	<p><b>servlet context (контекст сервлета)</b><p>Объект, содержащий представление (вид) Web-приложения, в котором запущен сервлет. Используя контекст, сервлет может вести журнал событий, получать URL-ссылки на ресурсы, а также устанавливать и хранить атрибуты, которые могут использоваться другими сервлетами в приложении.</p>
        <br>
	<p><b>servlet mapping (отображение сервлета)</b><p>Определяет связь между структурой URL и сервлетом. Используется для отображения запросов в сервлеты. Если контейнер, обрабатывающий запрос, является JSP-контейнером, то неявно отображается URL, содержащий расширение .jsp.</p>
        <br>
	<p><b>session (сессия)</b><p>Объект, используемый сервлетом, для прослеживания взаимодействий пользователя с Web-приложением при помощи множества HTTP-запросов.</p>
        <br>
	<p><b>session bean (сессионный компонент)</b><p>Корпоративный компонент (enterprise bean), который создается клиентом и обычно существует только в течение одной клиент-серверной сессии. Сессионный компонент выполняет для клиента вычислительные операции и организует доступ к базе данных. В случае сбоя системы сессионный компонент не восстанавливается. Объекты сессионных компонент могут не менять своего состояния или поддерживать диалоговое состояние в процессе выполнения методов и транзакций. Если объект поддерживает состояние, то EJB-контейнер управляет этим состоянием, если объект должен быть удален из памяти. Однако объекты сессионного компонента должны управлять собственными хранимыми данными.</p>
        <br>
	<p><b>short</b><p>Ключевое слово языка программирования Java, используемое для определения переменных типа short.</p>
        <br>
	<p><b>single precision (одинарная точность)</b><p>В спецификации языка Java описывает число с плавающей запятой, занимающее 32 бита данных.</p>
        <br>
	<p><b>Standardized Generalized Markup Language - SGML (стандартный язык обобщенной разметки)</b><p>Стандарт ISO/ANSI/ECMA для определения структуры и управления содержимым любого электронного документа.</p>
        <br>
	<p><b>Smart Web Services</b><p>Расширяют основную концепцию сетевых услуг, добавляя пользовательский контекст, и способны модифицировать свои действия, чтобы следить за изменениями текущего состояния клиента. Сюда входят классические дескрипторы "кто, что, когда, где, почему", которые объединяются для определения пользовательского контекста в данный момент.</p>
        <br>
	<p><b>The Simple Object Access Protocol – SOAP</b><p>Использует основанное на XML структурирование данных и HTTP для того, чтобы определить стандартизованные методы для вызова методов объектов, распределенных в различных средах по всей Internet.</p>
        <br>
	<p><b>Structured Query Language - SQL (язык структурированных запросов)</b><p>Стандартизованный язык реляционных баз данных, предназначенный для определения объектов баз данных и манипулирования данными.</p>
        <br>
	<p><b>stateful session bean (сессионный компонент с диалоговым состоянием)</b><p>Сессионный компонент с диалоговым состоянием.</p>
        <br>
	<p><b>stateless session bean (сессионный компонент, не имеющий состояния)</b><p>Сессионный компонент, не имеющий состояния. Все экземпляры такого компонента идентичны.</p>
        <br>
	<p><b>static</b><p>Ключевое слово языка программирования Java, используемое для определения переменной класса (типа). Классы обеспечивают только одну копию таких переменных, не зависимо от того, сколько экземпляров класса было создано. Слово static также может использоваться при определении метода класса. Такие статические методы вызываются от имени не экземпляра объекта, а его типа (класса), и могут, в свою очередь, оперировать только статическими переменными.</p>
        <br>
	<p><b>static field (статическое поле)</b><p>Другое название переменной класса.</p>
        <br>
	<p><b>static method (статический метод)</b><p>Другое название метода класса.</p>
        <br>
	<p><b>stream (поток)</b><p>Последовательность байтов данных, пересылаемых от отправителя к получателю. Существует две основные категории потоков, поэтому пакет java.io включает два абстрактных класса (InputStream и OutputStream).</p>
        <br>
	<p><b>subarray (подмассив)</b><p>Массив, содержащийся в другом массиве.</p>
        <br>
	<p><b>subclass (подкласс)</b><p>Класс, который "произведен" из другого класса.</p>
        <br>
	<p><b>subtype (подтип)</b><p>Если тип X "расширяет" или реализует тип Y, то X - подтип типа Y.</p>
        <br>
	<p><b>superclass (суперкласс)</b><p>Класс, из которого "произведены" другие классы.</p>
        <br>
	<p><b>super</b><p>Ключевое слово языка программирования Java, используемое для доступа к членам класса, наследуемого классом, из которого производится вызов.</p>
        <br>
	<p><b>supertype (супертип)</b><p>Все интерфейсы или классы, расширяемые или реализуемые данным типом.</p>
        <br>
	<p><b>switch</b><p>Ключевое слово языка программирования Java, используемое для определения переменной, которая в дальнейшем может быть использована ключевым словом case для выполнения блока инструкций.</p>
        <br>
	<p><b>Swing</b><p>Кодовое название совокупности графических компонентов, которые выполняются на любой платформе, поддерживающей виртуальную машину Java. Данные компоненты могут обеспечивать большие функциональные возможности, вследствие того, что они целиком написаны на языке Java.</p>
        <br>
	<p><b>synchronized</b><p>Ключевое слово языка программирования Java, которое при применении к методу или блоку кода, гарантирует, что данный код будет выполняться не более чем одним потоком одновременно.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="t">T</h3>
	<p><b>TCP/IP (TCP/IP)</b><p>Протокол управления передачей данных, основанный на IP. Internet-протокол, который обеспечивает надежную транспортировку потоков данных между компьютерами.</p>
        <br>
	<p><b>Technology Compatibility Kit - TCK (Испытатель Совместимости Технологии {TCK})</b><p>Набор тестов, инструментов, сопутствующих утилит и документации, которые позволяют реализатору Спецификации той или иной технологии определить, соответствует ли его реализация заданной Спецификации. Любая Java-технология состоит из Спецификации, ТСК и ссылочной реализации (reference implementation).</p>
        <br>
	<p><b>Thin Client ("тонкий" клиент)</b><p>Система, использующая очень упрощенную операционную систему, не требующая локального системного администрирования и выполняющая приложения, загруженные из сети.</p>
        <br>
	<p><b>this</b><p>Ключевое слово языка Java, которое может использоваться для ссылки на экземпляр класса, в котором используется эта ссылка. Слово this может использоваться для доступа, как к полям, так и к методам класса.</p>
        <br>
	<p><b>thread (процесс {поток})</b><p>Основная единица выполнения программы. Процесс может иметь несколько потоков, работающих одновременно и выполняющих различные задачи, такие как, ожидание события или исполнение трудоемкой по времени работы, окончание которой не требуется для дальнейшего выполнения программы. После выполнения потоком своей работы он приостанавливается или уничтожается.</p>
        <br>
	<p><b>throw</b><p>Ключевое слово языка Java , которое позволяет пользователю сгенерировать исключительную ситуацию или любой класс, реализующий "throwable" интерфейс (т.е. интерфейс, позволяющий классу генерировать прерывания).</p>
        <br>
	<p><b>throws</b><p>Ключевое слово языка Java, используемое в описании метода и определяющее, какие исключительные ситуации не обрабатываются внутри метода, а передаются на следующий, более высокий уровень программы.</p>
        <br>
	<p><b>Tool Provider (поставщик инструментов)</b><p>Организация или поставщик программного обеспечения, предоставляющий инструменты, используемые для разработки, компоновки и внедрения J2EE приложений.</p>
        <br>
	<p><b>transaction (транзакция)</b><p>Минимальная единица работы по изменению данных. Транзакция включает в себя одну или несколько программных инструкций, которые могут выполниться только все вместе. Если хотя бы одна из инструкций не выполняется, происходит возврат в исходное состояние (откат). Транзакции разрешают одновременный доступ нескольким пользователям к одним и тем же данным.</p>
        <br>
	<p><b>transaction attribute (атрибут транзакции)</b><p>Значение, определяемое в дескрипторе внедряемой корпоративной компоненты (enterprise bean), которое используется в контейнере EJB для управления областью действия транзакции при вызове методов компоненты. Атрибут транзакции может принимать следующие значения: Required, RequiresNew, Supports, NotSupported, Mandatory, Never ("требуется", "требуется для новых", "поддерживается", "не поддерживается", "принудительно", "никогда").</p>
        <br>
	<p><b>transaction isolation level (уровень изоляции транзакции)</b><p>Степень видимости промежуточного состояния модифицируемых транзакцией данных для других параллельных транзакций и данных, модифицируемых другими транзакциями, для данной транзакции.</p>
        <br>
	<p><b>transaction manager (менеджер транзакции)</b><p>Обеспечивает сервисы и управляющие функции, требуемые для поддержки разграничения транзакции, управления ресурсами транзакции, синхронизации и прохождения содержания транзакции.</p>
        <br>
	<p><b>transient</b><p>Ключевое слово языка Java, которое определяет, что поле не является частью сериализуемой формы объекта. Когда объект сериализуется, значения его transient полей не включаются в представление сериализации, в то время как значения не transient полей включаются.</p>
        <br>
	<p><b>try</b><p>Ключевое слово языка Java, определяющее блок операторов, которые могут генерировать исключительные ситуации Java. При возникновении исключительной ситуации необязательный catch блок может обработать определенные исключительные ситуации, сгенерированные внутри блока try. Также необязательный блок finally будет выполнен независимо от того, генерировалась исключительная ситуация или нет.</p>
        <br>
	<p><b>type</b><p>Класс или интерфейс.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="u">U</h3>
	<p><b>UDDI</b><p>Проект "Универсальное обнаружение и интеграция описаний" (The Universal Description Discovery and Integration - UDDI) обеспечивает глобальный, публичный, основанный на XML, онлайновый бизнес-регистр, в котором пользователи регистрируют и представляют свои web службы. UDDI представляет собой Internet-версию желтых страниц в справочнике телефонов.</p>
        <br>
	<p><b>Unicode (уникод)</b><p>16-битная кодовая таблица, определенная ISO 10646. Все исходные коды программной среды Java написаны в Unicode.</p>
        <br>
	<p><b>Uniform Resource Identifier - URI (унифицированный идентификатор ресурсов)</b><p>Компактная строка символов для идентификации абстрактного или физического ресурса. URI может быть или URL или URN. URL и URN представляют собой конкретные сущности, которые действительно существуют; URI является абстрактным суперклассом.</p>
        <br>
	<p><b>Uniform Resource Locator - URL (унифицированный указатель информационного ресурса)</b><p>Стандарт для записи текстовой ссылки на произвольные данные в WWW. URL выглядит следующим образом: "протокол://хост/локальная_информация", где протокол определяет конкретный протокол, используемый для доступа к объекту (например HTTP или FTP), хост определяет Internet-имя хоста, на котором объект находится, и локальная_информация - строка (часто имя файла), передаваемая обработчику протокола на удаленном хосте.</p>
        <br>
	<p><b>URL path</b><p>URL, передаваемый запросом HTTP для вызова сервлета. URL состоит из Context Path + Servlet Path + PathInfo, где Context Path является префиксом пути, ассоциируемым с контекстом сервлета. Этот сервлет является частью контекста. Если этот контекст является контекстом по умолчанию, находящимся в основном пространстве имен URL Web-сервера, префикс пути является пустой строкой. В противном случае префикс пути начинается с символа /, но не заканчивается символом /. Servlet Path - это участок пути, который прямо соответствует отображению, активизировавшему данный запрос. Этот путь начинается с символа /. PathInfo - это часть пути запроса, не являющаяся частью Context Path или Servlet Path.</p>
        <br>
	<p><b>URN (унифицированное имя ресурса)</b><p>Уникальный идентификатор, который идентифицирует сущность, но не показывает, где она расположена. Система может использовать URN для локального поиска сущности перед попыткой найти ее в Web. Этот идентификатор также позволяет изменение Web-ссылки при сохранении возможности нахождения сущности.</p>
        <br>
	<p><b>user data constraint (ограничитель данных пользователя)</b><p>Определяет, как должны быть защищены данные между клиентом и контейнером. Защита может быть предотвращением несанкционированного изменения данных либо предотвращением перехвата данных.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="v">V</h3>
	<p><b>variable (переменная)</b><p>Элемент данных, имеющий идентифицирующее его имя. Каждая переменная имеет тип (например, int или Object) и область видимости.</p>
        <br>
	<p><b>virtual machine (виртуальная машина)</b><p>Абстрактная спецификация для вычислительного устройства, которое может быть реализовано различным образом - программно или аппаратно. Вы компилируете последовательность команд виртуальной машины точно так же, как будто вы компилируете последовательность команд микропроцессора. Виртуальная машина Java состоит из байтовых команд, набора регистров, стека, "кучи" со сборкой "мусора" и областью для хранения методов.</p>
        <br>
	<p><b>vocabulary (словарь)</b><p>Обычно компьютерные программы пишутся и компилируются в машинные коды, которые прямо зависят от операционной системы, управляющей микропроцессором в компьютере. Java-платформа смягчает эту зависимость, обеспечивая модель, по которой программы пишутся, компилируются и могут быть переданы по сети и выполнены в любом месте, где присутствует полностью совместимая виртуальная машина. <p>Эта модель обеспечивает дополнительное преимущество в повышении безопасности. Во-первых, потому что программы могут быть проверены виртуальной машиной после того, как они были переданы по сети. И, во-вторых, потому что виртуальная машина может запустить программу в защищенном пространстве, которое предотвратит определенные разрушающие действия. <p>Разработчики программного обеспечения выбирают платформу Java потому, что это уменьшает стоимость и время написания и поддержки программного кода. Им больше не требуется переписывать программы для функционирования на различных компьютерах с различными операционными системами и микропроцессорами. Внедрение приложений Java технологии в компаниях и организациях выгодно, потому что это минимизирует стоимость покупки и модификации различных версий приложений для различных типов компьютеров и серверов внутри их сетей.</p>
        <br>
	<p><b>void</b><p>Ключевое слово языка Java, используемое в описании метода для указания на то, что метод не возвращает никакого значения. void может также использоваться как нефункциональный оператор.</p>
        <br>
	<p><b>volatile</b><p>Ключевое слово языка Java, используемое в описания переменной для указания на то, что переменная модифицируется асинхронно несколькими совместно выполняющимися потоками.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="w">W</h3>
	<p><b>wait</b><p>Команда UNIX, которая будет ожидать завершения всех фоновых процессов и отчета об их статусе завершения.</p>
        <br>
	<p><b>Web application, distributable (Web-приложение, распределенное)</b><p>Web-приложение, использующее технологию J2EE и написанное таким образом, что оно может быть внедрено в Web контейнер, распределенный по нескольким виртуальным машинам Java, работающих на одном хосте или на различных хостах. Дескриптор "размещения" для такого приложения использует распределенный элемент.</p>
        <br>
	<p><b>Web component (Web-компонент)</b><p>Компонент, обеспечивающий сервисы в ответ на запросы, сервлеты или JSP страницы.</p>
        <br>
	<p><b>Web container (Web-контейнер)</b><p>Контейнер, обеспечивающий исполнение Web компонентов, удовлетворяющих правилам J2EE архитектуры. Эти правила определяют среду времени выполнения (runtime environment) для Web-компонентов, включая безопасность, совместную работу, управление жизненным циклом, транзакции, внедрение и другие службы. Контейнер, обеспечивающий такие же службы как JSP контейнер и интегрированный взгляд на API платформы J2EE. Web контейнер обеспечивается Web или J2EE сервером.</p>
        <br>
	<p><b>Web container, distributed (Web-контейнер, распределенный)</b><p>Web-контейнер, который может запускать Web-приложение, помеченное как распределенное, которое выполняется на нескольких виртуальных машинах Java, работающих на одном или на различных хостах.</p>
        <br>
	<p><b>Web server (Web-сервер)</b><p>Программа, обеспечивающая службы для доступа в Internet, Intranet, или Extranet. Web-сервер содержит Web-сайты, обеспечивая поддержку HTTP и других протоколов и выполняет серверные программы (такие как CGI-скрипты или сервлеты), которые выполняют определенные функции. Например, Web-контейнер обычно основан на Web-сервере для обеспечения обработки сообщений HTTP. Архитектура J2EE предполагает, что Web-контейнер предоставляется Web-сервером от одного и того же поставщика, т.е. не определяя правила между этими двумя сущностями. Web-сервер может предоставлять один или много Web-контейнеров.</p>
        <br>
	<p><b>Web Services (Web-службы)</b><p>Свободно собранные программные компоненты, способные взаимодействовать между собой по многочисленным сетям для предоставления определенного результата конечному пользователю. Во время работы они используют развивающуюся группу стандартов, которые определяют их (служб) описание и взаимодействие, таких как SOAP (простой протокол доступа к объектам), UDDI (универсальное обнаружение и интеграция описаний), XML (открытый язык меток), WSDL (язык описания Web-служб).</p>
        <br>
	<p><b>while</b><p>Ключевое слово языка Java, используемое для определения цикла, который повторяет блок инструкций. Условие продолжения цикла указывается как часть оператора while.</p>
        <br>
	<p><b>world readable files (общедоступные для чтения файлы)</b><p>Файлы в файловой системе, которые могут быть просмотрены (прочтены) любым пользователем. Например: файлы, расположенные на Web-серверах могут быть просмотрены пользователями Internet, если права файлов были установлены как "доступные для чтения".</p>
        <br>
	<p><b>wrapper</b><p>Объект, который инкапсулирует и уполномочивает другой объект на изменение своего интерфейса или поведения определенным образом.</p>
        <br>
	<p><b>Web Services Description Language - WSDL (язык описания Web-сервисов)</b><p>XML язык, который используется для описания Web-сервиса и для определения способа общения с Web-сервисом.</p>
        <br>
	<p><b>World Wide Web - WWW</b><p>"Всемирная паутина". Сеть систем и данных в них, т.е. часть Internet.</p>
        <br>

	<h3 style="text-align: left; text-indent: 40px; text-decoration: underline;color:#f4911c;" id="x">X</h3>
	<p><b>XML - Extensible Markup Language (расширяемый язык меток)</b><p>Расширяемый язык разметки текстов (или текстовых документов). Дескрипторы размещения J2EE выражены при помощи XML.</p>
        <br>
</div>
        </div>
      </div>
    </div>

</div>
          <br />
          <br />
      </div>
      </div>
      
  </div>

</div>
  <br>
  <br>
  <br>
<br>
<br>
<br>
<br>
<br>
<br>
  <br>
  <br>
<br>
<br>

<br>
<br>
<br>
  <br>
  <br>
<br>
<br>
<br>
  <br>
  <br>
  <br>
  <br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
  <br>
  <br>
<br>
<br>
<br>
  <br>
  <br>
  <br>
  <br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
  <br>
  <br>
<br>
<br>
<br>
  <br>
  <br>
  <br>
  <br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
  <br>
  <br>
<br>
<br>
<br>
  <br>
  <br>
  <br>
  <br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
  <br>
  <br>
<br>
<br>
<br>
  <br>
  <br>
  <br>
  <br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
  <br>
  <br>
<br>
<br>
<br>
  <br>
  <br>
  <br>
  <br>
<br>
<br>
<br>
<br>
<br>
<br>


 <div class="footer_wrap">
  <div class="footer_area">
    <p class="footer_nav_text"><a href="#" class="footeractive">Главная</a> |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;
        <span style="color: #fff; font-family: Verdana, Arial, Helvetica, sans-serif; font-size: 9pt; font-style: normal; font-variant: normal; font-weight: normal; letter-spacing: normal; line-height: normal; orphans: auto; text-align: -webkit-center; text-indent: 0px; text-transform: none; white-space: normal; widows: auto; word-spacing: 0px; -webkit-text-stroke-width: 0px; display: inline !important; float: none;">
        © Кафедра прикладной математики и информатики, 2015</span></div>
    <br class="blank" />
  </div>
</div>
</body>
</html>
